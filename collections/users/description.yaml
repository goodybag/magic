collection:
  resource:
    type: collection
    path: /users
  methods:
    get:
      desc: List Users
      query:
        offset:   { type: int,    eg: 5 }
        limit:    { type: int,    eg: 5 }
        filter:   { type: string, eg: tfergu }
    post:
      desc: Add User
      body:
        email:              { type: email,  eg: user_XXX@goodybag.com, required: true }
        password:           { type: string, eg: password }
        singlyId:           { type: string }
        singlyAccessToken:  { type: string }
        groups:             { type: group*, eg: [1,2] }
        cardId:             { type: cardid, eg: 123456-ABC }
      auth:
        required: true
        eg: { email: admin@goodybag.com, password: password }
  children:
    - /users/:id
    - /users/complete-registration/:token
item:
  resource:
    type: item
    path: /users/:id
    params:
      id: { type: int, eg: 11134 }
  methods:
    get:
      desc: Get User
    put:
      desc: Update User
      auth:
        required: true
        eg: { email: admin@goodybag.com, password: password }
      body:
        email:              { type: email,  eg: goody2@goodybag.com }
        password:           { type: string, eg: password }
        groups:             { type: group*, eg: [1,2] }
        singlyId:           { type: string }
        singlyAccessToken:  { type: string }
        cardId:             { type: cardid, eg: 123456-ABC }
    delete:
      desc: Delete User
      auth:
        required: true
        eg: { email: admin@goodybag.com, password: password }

completeRegistration:
  resource:
    type: item
    path: /users/complete-registration/:token
    params:
      token: { type: string, eg: chaos-token}
  methods:
    get:
      desc: get email of partial registration
    post:
      desc: Complete partial registration
      body:
        email:          {type: email, eg: chaos@example.com}
        password:       {type: string, required: {unless: code}, eg: password}
        code:           {type: string, required: {unless: password}}
        screenName:     {type: string}

cardUpdatesCollection:
  resource:
    type: collection
    path: /users/card-updates
  methods:
    post:
      desc: Request Card Change
      auth:
        required: true
        eg: { email: admin@goodybag.com, password: password }
      body:
        email:  { type: email,  required: true, eg: used_for_card_update_tests@goodybag.com }
        cardId: { type: cardid, required: true, eg: 610XXX-URL, min: 10, max: 10 }
  children:
    - /users/card-updates/:token

cardUpdatesItem:
  resource:
    type: item
    path: /users/card-updates/:token
    params:
      token: { type: string, eg: e }
  methods:
    post:
      desc: Finalize Card Change
    get:
      desc: Get user and card info
    delete:
      desc: Invalidate the token